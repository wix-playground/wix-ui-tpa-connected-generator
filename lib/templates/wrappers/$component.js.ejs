import React from 'react'
import {<%=componentName%>Ext} from '../../<%=consumerBasePath%>/<%=componentName%>/<%=componentName%>'

const {SettingsChangeObserver} = __non_webpack_require__('wix-ui-tpa-connected/dist/SettingsChangeObserver')
const {StyleInjector} = __non_webpack_require__('wix-ui-tpa-connected/dist/StyleInjector')
const {OOIFWixSdk} = __non_webpack_require__('wix-ui-tpa-connected/dist/OOIFWixSdk')
const {getContext} = __non_webpack_require__('wix-ui-tpa-connected/withWutc')

let projectVariableStructure = <%-projectVariableStructure%>;
let styles = `<%=COMPONENT_STYLES_PLACEHOLDER%>`;
let componentName = '<%=componentName%>';

class <%=componentName%>Component extends React.Component {
  constructor(props) {
    super(props);
    this.state = {stylesInitialized: false}
    this.stylesInitialized = false
    this.wut = React.createRef();

    if (window) {
      this.initStyles(props)
    } else {
      // TODO: SSR styles preload to avoid flickering
    }
  }

  initStyles(props) {
    if (!this.stylesInitialized) {
      this.stylesInitialized = true

      let hasSettings = true;

      if (!props.settings) {
        props.settings = {};
        hasSettings = false;
      }

      const componentNamespace = `v${componentName}-${hashProps(JSON.stringify(props.settings))}`;

      let WixSdk = (window || {}).Wix;

      if (!WixSdk) {
        if (props.wutcContext) {
          WixSdk = new OOIFWixSdk(props.wutcContext.style, props.wutcContext.viewMode)
        } else {
          WixSdk = new OOIFWixSdk({siteColors: [], siteTextPresets: {}, styleParams: {}}, 'standalone')
        }
      }

      const styleInjector = new StyleInjector(window.document, componentNamespace, WixSdk)
      styleInjector.addInitialCss(styles)

      this.namespacedClass = `${componentNamespace}${this.props.className ?  ' ' + this.props.className : ''}`;

      if (hasSettings) {
        const settingsObserver = new SettingsChangeObserver(WixSdk);

        settingsObserver.forVariables(Object.values(props.settings))
          .updateOnChange(newStyles => {
            styleInjector.updateComponentStyle(props.settings, projectVariableStructure, newStyles)
          });
      }

      this.setState({stylesInitialized: true})
    }
  }

  componentDidMount() {
    this.initStyles(props)
  }

  getApi() {
    return this.wut ? this.wut.current : null
  }

  render() {
    return React.createElement(
      <%=componentName%>Ext,
      {
        ...this.props,
        className: this.namespacedClass,
        ref: this.wut
      }
    );
  }
}

function hashProps(propsAsString) {
    let h = 0xdeadbeef;
    for (let i = 0; i < propsAsString.length; i++) {
      h = Math.imul(h ^ propsAsString.charCodeAt(i), 2654435761);
    }
    return (h ^ h >>> 16) >>> 0;
  }

export const <%=componentName%> = getContext(<%=componentName%>Component);
